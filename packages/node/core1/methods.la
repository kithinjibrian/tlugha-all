use super::types::{ 
    Num, 
    Str, 
    Map, 
    Set, 
    Bool,
    Unit, 
    Tuple, 
    Array,
    Result
};


// generic traits
trait Length {
    fun length<T>(t: T): num;
}
////

trait Sqrt {
    fun sqrt(number: num): num;
}

trait Abs {
    fun abs(number: num): num;
}

trait Ceil {
    fun ceil(number: num): num;
}

trait Floor {
    fun floor(number: num): num;
}

trait Round {
    fun round(number: num): num;
}

trait Trunc {
    fun trunc(number: num): num;
}

trait Pow {
    fun pow(number: num, order: num): num;
}

impl Sqrt for Num {
    fun sqrt(number: num): num {
        root::builtin::__num_sqrt__(number)
    }
}

impl Abs for Num {
    fun abs(number: num): num {
        root::builtin::__num_abs__(number)
    }
}

impl Ceil for Num {
    fun ceil(number: num): num {
        root::builtin::__num_ceil__(number)
    }
}

impl Floor for Num {
    fun floor(number: num): num {
        root::builtin::__num_floor__(number)
    }
}

impl Round for Num {
    fun round(number: num): num {
        root::builtin::__num_round__(number)
    }
}

impl Trunc for Num {
    fun trunc(number: num): num {
        root::builtin::__num_trunc__(number)
    }
}

impl Pow for Num {
    fun pow(number: num, order: num): num {
        root::builtin::__num_pow__((number, order))
    }
}

///Bool
trait Not {
    fun not(bool: bool): bool;
}

trait And {
    fun and(bool: bool): bool;
}

trait Or {
    fun or(bool: bool): bool;
}

trait Xor {
    fun xor(bool: bool): bool;
}

trait Not {
    fun not(bool: bool): bool;
}

impl And for Bool {
    fun and(bool: bool): bool {
        root::builtin::__bool_and__(bool)
    }
}

impl Or for Bool {
    fun or(bool: bool): bool {
        root::builtin::__bool_or__(bool)
    }
}

impl Xor for Bool {
    fun xor(bool: bool): bool {
        root::builtin::__bool_xor__(bool)
    }
}

impl Not for Bool {
    fun not(bool: bool): bool {
        root::builtin::__bool_not__(bool)
    }
}


////String
trait Format {
    fun format<T>(string: str, args: T): str;
}

impl Format for Str {
    fun format<T>(fmt: str, args: T): str {
        root::builtin::__str_format__((fmt, args))
    } 
}

impl Length for Str {
    fun length<T>(string: str): str {
        root::builtin::__str_length__(string)
    } 
}

//// Array
trait Push {
    fun push<T, E>(arr: T, elem: E): num;
}

trait Pop {
    fun pop<T, V>(arr: T): Result<V, str>;
}

trait IsEmpty {
    fun is_empty<T, E>(arr: T): bool;
}

impl Push for Array {
    fun push<T, E>(arr: T, elem: E): num {
        root::builtin::__arr_push__((arr, elem))
    } 
}

impl Pop for Array {
    fun pop<T, V>(arr: T): Result<V, str> {
        root::builtin::__arr_pop__(arr)
    } 
}

impl IsEmpty for Array {
    fun is_empty<T>(arr: T): bool {
        root::builtin::__arr_is_empty__(arr)
    } 
}

impl Length for Array {
    fun length<T>(arr: T): num {
        root::builtin::__arr_length__(arr)
    } 
}

//// Tuple
impl IsEmpty for Tuple {
    fun is_empty<T>(arr: T): bool {
        root::builtin::__arr_is_empty__(arr)
    } 
}

////Map
trait Get {
    fun get<M, K, V>(mp: M, key: K): Result<V, str>;
}

trait Set {
    fun set<M, K, V>(key: K, value: V): unit;
}

impl Get for Map {
    fun get<M, K, V>(mp: M, key: K): Result<V, str> {
        root::builtin::__map_get__((mp, key))
    } 
}

impl Set for Map {
    fun set<M, K, V>(mp: M, key: K, value: V): unit {
        root::builtin::__map_set__((mp, key, value))
    } 
}