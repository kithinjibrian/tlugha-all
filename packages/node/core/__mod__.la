enum Result<T, E> {
    Ok(T),
    Err(E)
}

impl Result {
    fun unwrap(self: Self): T {
        match self {
            Result::Ok(val) => val,
            Result::Err(err) => root::builtin::__panic__("called `Result::unwrap()` on an `Err` value: {}".format([err]))
        } 
    }

    fun expect(self: Self, message: string): unit {
        match self {
            Result::Ok(val) => val,
            Result::Err(err) => root::builtin::__panic__(message)
        }
    }
}

enum Option<T> {
    Some(T),
    None
}

impl Option {
    fun unwrap(self: Self): unit {
        match self {
            Option::Some(val) => val,
            Option::None => root::builtin::__panic__("called `Option::unwrap()` on an `None` value")
        } 
    }

    fun expect(self: Self, message: string): unit {
        match self {
            Option::Some(val) => val,
            Option::None => root::builtin::__panic__(message)
        }
    }
}

struct str {}

impl str {
    fun default(): str {
        ""
    }
}