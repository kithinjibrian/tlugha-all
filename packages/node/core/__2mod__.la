import types;
import ops;
import methods;

enum Result<T, E> {
    Ok(T),
    Err(E)
}

impl Result {
    fun unwrap<K>(res: K): T {
        match res {
            Result::Ok(val) => val,
            Result::Err(err) => root::builtin::__panic__("called `Result::unwrap()` on an `Err` value: {}".format([err]))
        } 
    }

    fun expect<K>(res: Self, message: str): T {
        match res {
            Result::Ok(val) => val,
            Result::Err(err) => root::builtin::__panic__(message)
        }
    }
}

enum Option<T> {
    Some(T),
    None
}

impl Option {
    fun unwrap(res: Self): T {
        match res {
            Option::Some(val) => val,
            Option::None => root::builtin::__panic__("called `Option::unwrap()` on an `None` value")
        } 
    }

    fun expect(res: Self, message: string): T {
        match res {
            Option::Some(val) => val,
            Option::None => root::builtin::__panic__(message)
        }
    }
}
