use super::io::{ print };
use super::re::{ Regex };
use super::proc_macro::{ Token };

fun one_char(c: str): str {
    match c {
        "+" => "+",
        "=" => "=",
        ";" => ";",
        "," => ",",
        ":" => ":",
        "'" => "'",
        "{" => "{",
        "}" => "}",
        "(" => "(",
        ")" => ")",
        "[" => "[",
        "]" => "]",
        "<" => "<",
        ">" => ">",
        "." => ".",
        "\"" => "\"",
        "\\" => "\\",
        _ => "OP"
    }
}

fun two_char(c1: str, c2: str): str {
    match c1 {
        ':' => match c2 {
            ':' => "::",
            _ => "OP",
        },
        '=' => match c2 {
            '=' => "==",
            '>' => "=>",
            _ => "OP",
        },
        '>' => match c2 {
            '=' => ">=",
            _ => "OP",
        },
        _ => "OP",
    }
}

struct Lexer {
    input: str;
    mut line: num;
    mut column: num;
    mut position: num;
}

impl Lexer {
    fun new(input: str): Lexer {
        Lexer {
            input,
            line: 1,
            column: 1,
            position: 0,
        }
    }

    fun peek(self: Self, offset: num): str {
        return match self.input.at(self.position + offset) {
            Ok(y) => y,
            Err(z) => r"\0"
        };
    }

    fun advance(self: Self): str {
        let char = self.peek(0);
        self.position += 1;

        if char == '\n' {
            self.line += 1;
            self.column = 1;
        } else {
            self.column += 1;
        };

        return char;
    }

    fun get_current_line(self: Self): str {
        return match self.input.at(self.line - 1) {
            Ok(y) => y,
            Err(z) => ""
        };
    }

    fun skip_whitespace(self: Self): unit {
        let re = Regex::new(r"\s");
        while re.is_match(self.peek(0)) {
            self.advance();
        }
    }

    fun read_operator(self: Self): Result<Token, str> {
        let start_column = self.column;
        let current_line_str = self.get_current_line();

        let c1 = self.peek(0);
        let c2 = self.peek(1);
        let c3 = self.peek(2);

        let two_char_op = two_char(c1, c2);

        if two_char_op != "OP" { 
           self.advance();
           self.advance();
           return Ok(Token::Op(two_char_op));
        }

        let one_char_op = one_char(c1);


        if one_char_op == "OP" { 
            return Err("Invalid character {}".format(c1));
        } else {
           self.advance();
           return Ok(Token::Op(one_char_op));
        }
    }

    fun read_number(self: Self): Result<Token, str> {
        let value = [];
        let re = Regex::new(r"\d");
        let start_column = self.column;
        let current_line_str = self.get_current_line();

        while re.is_match(self.peek(0)) && self.peek(0) != r"\0" {
            value.push(self.advance());
        }

        if self.peek(0) == "." {
            value.push(self.advance());
            while re.is_match(self.peek(0)) {
                value.push(self.advance());
            }
        }

        Ok(Token::Number(value.join("")))
    }

    fun read_identifier(self: Self): Result<Token, str> {
        let value = [];
        let start_column = self.column;
        let current_line_str = self.get_current_line();

        let re = Regex::new(r"[a-zA-Z0-9_]");

        while re.is_match(self.peek(0)) && self.peek(0) != r"\0" {
            value.push(self.advance());
        }

        let iden = value.join("");
 
        Ok(Token::Identifier(iden))
    }

    fun read_string(self: Self): Result<Token, str> {
        let value = [];
        let quote = self.peek(0);
        let start_column = self.column;
        let current_line_str = self.get_current_line();

        if quote == '"' || quote == "'" {
            self.advance();

            while self.peek(0) != quote && self.peek(0) != r"\0" {
                let ch = self.peek(0);

                if ch == "\\" {
                    self.advance();
                    let escape_char = self.advance();
                    let escape_seqs = map {
                        "n": "\n",
                        "t": "\t",
                        "\\": "\\",
                        '"': '"',
                        "'": "'"
                    };

                    match escape_seqs.get(escape_char) {
                        Ok(c) => value.push(c),
                        Err(e) => value.push(escape_char)
                    }
                } else {
                    value.push(self.advance());
                }
            }
        };

        self.advance();

        return Ok(Token::String(value.join("")));
    }

    fun get_next_token(self: Self): Result<Token, str> {
        self.skip_whitespace();

        if self.position >= self.input.length() {
            return Ok(Token::EOF);
        }

        const char = self.peek(0);

        let num = Regex::new(r"\d");
        let alpha = Regex::new(r"[a-zA-Z_]");

        if num.is_match(char) {
            return self.read_number();
        }

        if alpha.is_match(char) {
            return self.read_identifier();
        }

        if char == '"' || char == "'" {
            return self.read_string();
        }

        self.read_operator()
    }

    fun tokenize(self: Self): Result<Array<Token>, str> {
        let tokens: Array<Token> = [];

        while self.position <= self.input.length() {
            match self.get_next_token() {
                Ok(token) => {
                    match token {
                        Token::EOF => {
                            break;
                        },
                        _ => tokens.push(token)
                    }
                },
                Err(e) => return Err(e)
            }
        }

        Ok(tokens)
    }
}

